# This docker-compose file will spin up an ACS cluster on a local host or on a server and it requires a minimum of 12GB Memory to distribute among containers.
# Limit container memory and assign X percentage to JVM.  There are couple of ways to allocate JVM Memory for ACS Containers
# For example: 'JAVA_OPTS: "$JAVA_OPTS -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"'
# But, as per Oracle docs (https://docs.oracle.com/javase/9/gctuning/parallel-collector1.htm#JSGCT-GUID-CAB83393-3438-44ED-98F0-D15641B43C7D)
# If container memory is not explicitly set, then the above flags will default max heap to 1/4th of container's memory which may not be ideal.
# Hence, setting up explicit Container memory and then assigning a percentage of it to the JVM for performance tuning.

# Using version 2 as 3 does not support resource constraint options (cpu_*, mem_* limits) for non swarm mode in Compose
version: "2"

services:
  alfresco:
    build: ../alfresco-content-repository-community
    mem_limit: 1500m
    environment:
      JAVA_OPTS : "
      -Xms1g -Xmx1g
      -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000
      "
    ports:
      - 8082:8080 #Browser port
      - 8000:8000 #Browser port
    volumes:
      - ./data/alfresco/alfresco-global.properties:/usr/local/tomcat/shared/classes/alfresco-global.properties
      - alfresco:/usr/local/tomcat/alf_data

  share:
    build: ../alfresco-share
    mem_limit: 1g
    environment:
      - REPO_HOST=alfresco
      - REPO_PORT=8080
      - "CATALINA_OPTS= -Xms500m -Xmx500m"
    ports:
      - 8080:8080

  postgres:
    image: postgres:10.1
    mem_limit: 1500m
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=alfresco
    command: postgres -c max_connections=300 -c log_min_messages=LOG
    ports:
      - 54321:5432
    volumes:
      - postgres:/var/lib/postgresql/data

  solr6:
    image: alfresco/alfresco-search-services:1.3.0-RC2
    mem_limit: 2500m
    environment:
      #Solr needs to know how to register itself with Alfresco
      - SOLR_ALFRESCO_HOST=alfresco
      - SOLR_ALFRESCO_PORT=8080
      #Alfresco needs to know how to call solr
      - SOLR_SOLR_HOST=solr6
      - SOLR_SOLR_PORT=8983
      #Create the default alfresco and archive cores
      - SOLR_CREATE_ALFRESCO_DEFAULTS=alfresco,archive
      - "SOLR_JAVA_MEM=-Xms2g -Xmx2g"
    ports:
      - 8083:8983 #Browser port
    volumes:
      - solr6-data:/opt/alfresco-search-services/data
      - solr6-solrhome:/opt/alfresco-search-services/solrhome

  activemq:
    image: alfresco/alfresco-activemq:5.15.6
    mem_limit: 2048m
    ports:
      - 8161:8161 # Web Console
      - 5672:5672 # AMQP
      - 61616:61616 # OpenWire
      - 61613:61613 # STOMP
    volumes:
      - activemq-conf:/opt/activemq/conf
      - activemq-log:/var/log/activemq
      - activemq-data:/opt/activemq/data

  promena:
    image: promena-executable:0.9.0
    environment:
      - "spring.activemq.broker-url=failover:(nio://activemq:61616)?timeout=3000&jms.useCompression=true"

volumes:
  alfresco:
  postgres:
  activemq-conf:
  activemq-log:
  activemq-data:
  solr6-data:
  solr6-solrhome: